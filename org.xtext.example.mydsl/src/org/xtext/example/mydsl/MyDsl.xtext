grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

// TODO : unaryExpression & BinaryExpression &  not expression 
// TODO : 
Programme:
	statements+=Statement*;

Statement:
	Primitive | Expression | Assignement;

Assignement:
	variable=Variable "=" value=Expression;

Primitive:
	Load | Save | Sum | Prod | Depth | Print;

Sum:
	"sum" "(" variable=Variable ")";

Prod:
	"prod" "(" variable=Variable ")";

Expression:
	TerminalExpression ({BinaryExpression.left=current} op=Operator right=TerminalExpression)*;

TerminalExpression returns Expression:
	'(' Expression ')' | JsonValue | Variable | {Not} 'not' value=TerminalExpression;

Variable:
	nodes+=ID ('.' nodes+=ID)*;

JsonObject:
	{JsonObject} "{" (associations+=Association)? (',' associations+=Association)* "}";

Association:
	(key=STRING ":" value=JsonValue);

JsonValue:
	JsonString | JsonInteger | Boolean | JsonObject | JsonArray;

JsonArray:
	'[' value+=JsonValue (',' value+=JsonValue)* ']' | {JsonArray} '[' ']';

JsonString:
	value=STRING;

JsonInteger:
	value=INT;

Boolean:
	{True} "true" | {False} "false";

Operator:
	{Addition} "+" | {Minus} "-" | {Time} "*" | {Div} "/" | {And} '&' | {Or} '|';

Load:
	"load" "(" path=STRING "," varName=ID ")";

Save:
	"save" "(" path=STRING "," varName=ID ")";

Depth:
	"depth" "(" value=Expression ")";

Print:
	"print" "(" value=Expression ")";